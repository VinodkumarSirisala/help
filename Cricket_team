const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const app = express()
app.use(express.json())

module.exports = app

const dbPath = path.join(__dirname, 'cricketTeam.db')

let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at 3000')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

const convertDbObjectToResponseObject = dbObject => {
  return {
    playerId: dbObject.player_id,
    playerName: dbObject.player_name,
    jerseyNumber: dbObject.jersey_number,
    role: dbObject.role,
  }
}

app.get('/players/', async (request, response) => {
  const getPlayersQuery = `
 SELECT
 *
 FROM
 cricket_team;`
  const playersArray = await db.all(getPlayersQuery)
  response.send(
    playersArray.map(eachPlayer => convertDbObjectToResponseObject(eachPlayer)),
  )
})

// add player API

app.post('/player/', async (request, response) => {
  const getDetails = request.body
  const {playerName, jerseyNumber, role} = getDetails
  const addPlayerQuary = `
  INSERT INTO cricket_team(player_name,jersey_number,role)
  values(
    ${playerName},
    ${jerseyNumber},
    ${role}
  )`
  const dbResponse = await db.run(addPlayerQuary)
  response.send('Player Added to Team')
})

//GET one player api

app.get('/players/:playerId/', async (request, response) => {
  const {playerId} = request.params;
  const getplayerQuery = `
    SELECT
      *
    FROM
      cricket_team
    WHERE
      player_id = ${playerId};`
  const oneplayer = await db.get(getplayerQuery)
  response.send(oneplayer)
})

// put API
app.put('/players/:playerId/', async (request, response) => {
  const {playerId} = request.params
  const playerDetails = request.body
  const {playerName, jerseyNumber, role} = playerDetails;
  const updateplayerQuery = `
    UPDATE
      cricket_team
    SET
      playerName = ${playerName},
      jerseyNumber = ${jerseyNumber},
      role = ${role}
      
    WHERE
      player_id = ${playerId};`
  await db.run(updateplayerQuery)
  response.send('Player Details Updated')
})

// delete

app.delete("/players/:playerId/", async (request, response) => {
  const { playerId } = request.params;
  const deleteplayerQuery = `
    DELETE FROM
      cricket_team
    WHERE
      player_id = ${playerId};`;
  await db.run(deleteplayerQuery);
  response.send("Player Deleted Successfully");
});
